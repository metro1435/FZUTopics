<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fzutopic.dao.CtcommentDao">
  <resultMap id="BaseResultMap" type="com.fzutopic.model.Ctcomment">
    <id column="commentID" jdbcType="CHAR" property="commentid" />
    <result column="likes" jdbcType="INTEGER" property="likes" />
    <result column="unlikes" jdbcType="INTEGER" property="unlikes" />
    <result column="time" jdbcType="TIMESTAMP" property="time" />
    <result column="isAnony" jdbcType="INTEGER" property="isanony" />
    <result column="userID" jdbcType="CHAR" property="userid" />
    <result column="commentItemID" jdbcType="CHAR" property="commentitemid" />
    <result column="auditStatus" jdbcType="INTEGER" property="auditstatus" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.fzutopic.model.Ctcomment">
    <result column="text" jdbcType="LONGVARCHAR" property="text" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    commentID, likes, unlikes, `time`, isAnony, userID, commentItemID, auditStatus
  </sql>
  <sql id="Blob_Column_List">
    `text`
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.fzutopic.model.CtcommentExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from ctcomment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="com.fzutopic.model.CtcommentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ctcomment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from ctcomment
    where commentID = #{commentid,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from ctcomment
    where commentID = #{commentid,jdbcType=CHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.fzutopic.model.CtcommentExample">
    delete from ctcomment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="commentID" keyProperty="commentid" parameterType="com.fzutopic.model.Ctcomment" useGeneratedKeys="true">
    insert into ctcomment (likes, unlikes, `time`, 
      isAnony, userID, commentItemID, 
      auditStatus, `text`)
    values (#{likes,jdbcType=INTEGER}, #{unlikes,jdbcType=INTEGER}, #{time,jdbcType=TIMESTAMP}, 
      #{isanony,jdbcType=INTEGER}, #{userid,jdbcType=CHAR}, #{commentitemid,jdbcType=CHAR}, 
      #{auditstatus,jdbcType=INTEGER}, #{text,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" keyColumn="commentID" keyProperty="commentid" parameterType="com.fzutopic.model.Ctcomment" useGeneratedKeys="true">
    insert into ctcomment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="likes != null">
        likes,
      </if>
      <if test="unlikes != null">
        unlikes,
      </if>
      <if test="time != null">
        `time`,
      </if>
      <if test="isanony != null">
        isAnony,
      </if>
      <if test="userid != null">
        userID,
      </if>
      <if test="commentitemid != null">
        commentItemID,
      </if>
      <if test="auditstatus != null">
        auditStatus,
      </if>
      <if test="text != null">
        `text`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="likes != null">
        #{likes,jdbcType=INTEGER},
      </if>
      <if test="unlikes != null">
        #{unlikes,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="isanony != null">
        #{isanony,jdbcType=INTEGER},
      </if>
      <if test="userid != null">
        #{userid,jdbcType=CHAR},
      </if>
      <if test="commentitemid != null">
        #{commentitemid,jdbcType=CHAR},
      </if>
      <if test="auditstatus != null">
        #{auditstatus,jdbcType=INTEGER},
      </if>
      <if test="text != null">
        #{text,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.fzutopic.model.CtcommentExample" resultType="java.lang.Long">
    select count(*) from ctcomment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update ctcomment
    <set>
      <if test="record.commentid != null">
        commentID = #{record.commentid,jdbcType=CHAR},
      </if>
      <if test="record.likes != null">
        likes = #{record.likes,jdbcType=INTEGER},
      </if>
      <if test="record.unlikes != null">
        unlikes = #{record.unlikes,jdbcType=INTEGER},
      </if>
      <if test="record.time != null">
        `time` = #{record.time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isanony != null">
        isAnony = #{record.isanony,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null">
        userID = #{record.userid,jdbcType=CHAR},
      </if>
      <if test="record.commentitemid != null">
        commentItemID = #{record.commentitemid,jdbcType=CHAR},
      </if>
      <if test="record.auditstatus != null">
        auditStatus = #{record.auditstatus,jdbcType=INTEGER},
      </if>
      <if test="record.text != null">
        `text` = #{record.text,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update ctcomment
    set commentID = #{record.commentid,jdbcType=CHAR},
      likes = #{record.likes,jdbcType=INTEGER},
      unlikes = #{record.unlikes,jdbcType=INTEGER},
      `time` = #{record.time,jdbcType=TIMESTAMP},
      isAnony = #{record.isanony,jdbcType=INTEGER},
      userID = #{record.userid,jdbcType=CHAR},
      commentItemID = #{record.commentitemid,jdbcType=CHAR},
      auditStatus = #{record.auditstatus,jdbcType=INTEGER},
      `text` = #{record.text,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update ctcomment
    set commentID = #{record.commentid,jdbcType=CHAR},
      likes = #{record.likes,jdbcType=INTEGER},
      unlikes = #{record.unlikes,jdbcType=INTEGER},
      `time` = #{record.time,jdbcType=TIMESTAMP},
      isAnony = #{record.isanony,jdbcType=INTEGER},
      userID = #{record.userid,jdbcType=CHAR},
      commentItemID = #{record.commentitemid,jdbcType=CHAR},
      auditStatus = #{record.auditstatus,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.fzutopic.model.Ctcomment">
    update ctcomment
    <set>
      <if test="likes != null">
        likes = #{likes,jdbcType=INTEGER},
      </if>
      <if test="unlikes != null">
        unlikes = #{unlikes,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        `time` = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="isanony != null">
        isAnony = #{isanony,jdbcType=INTEGER},
      </if>
      <if test="userid != null">
        userID = #{userid,jdbcType=CHAR},
      </if>
      <if test="commentitemid != null">
        commentItemID = #{commentitemid,jdbcType=CHAR},
      </if>
      <if test="auditstatus != null">
        auditStatus = #{auditstatus,jdbcType=INTEGER},
      </if>
      <if test="text != null">
        `text` = #{text,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where commentID = #{commentid,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.fzutopic.model.Ctcomment">
    update ctcomment
    set likes = #{likes,jdbcType=INTEGER},
      unlikes = #{unlikes,jdbcType=INTEGER},
      `time` = #{time,jdbcType=TIMESTAMP},
      isAnony = #{isanony,jdbcType=INTEGER},
      userID = #{userid,jdbcType=CHAR},
      commentItemID = #{commentitemid,jdbcType=CHAR},
      auditStatus = #{auditstatus,jdbcType=INTEGER},
      `text` = #{text,jdbcType=LONGVARCHAR}
    where commentID = #{commentid,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.fzutopic.model.Ctcomment">
    update ctcomment
    set likes = #{likes,jdbcType=INTEGER},
      unlikes = #{unlikes,jdbcType=INTEGER},
      `time` = #{time,jdbcType=TIMESTAMP},
      isAnony = #{isanony,jdbcType=INTEGER},
      userID = #{userid,jdbcType=CHAR},
      commentItemID = #{commentitemid,jdbcType=CHAR},
      auditStatus = #{auditstatus,jdbcType=INTEGER}
    where commentID = #{commentid,jdbcType=CHAR}
  </update>
</mapper>